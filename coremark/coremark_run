#!/bin/bash
#
#                         License
#
# Copyright (C) 2021  David Valin dvalin@redhat.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# This script automates the execution of coremark.  It will determine the
# set of default run parameters based on the system configuration.
#

commit="none"
coremark_version="v1.01"
test_name="coremark"
results_file="results_${test_name}.csv"
arguments="$@"

exit_out()
{
	echo $1
	exit $2
}

if [ ! -f "/tmp/${test_name}.out" ]; then
	command="${0} $@"
	echo $command
	$command &> /tmp/${test_name}.out
	rtc=$?
	cat /tmp/${test_name}.out
	rm /tmp/${test_name}.out
	exit $rtc 
fi

curdir=`pwd`
if [[ $0 == "./"* ]]; then
	chars=`echo $0 | awk -v RS='/' 'END{print NR-1}'`
	if [[ $chars == 1 ]]; then
		run_dir=`pwd`
	else
		run_dir=`echo $0 | cut -d'/' -f 1-${chars} | cut -d'.' -f2-`
		run_dir="${curdir}${run_dir}"
	fi
elif [[ $0 != "/"* ]]; then
	dir=`echo $0 | rev | cut -d'/' -f2- | rev`
	run_dir="${curdir}/${dir}"
else
	chars=`echo $0 | awk -v RS='/' 'END{print NR-1}'`
	run_dir=`echo $0 | cut -d'/' -f 1-${chars}`
	if [[ $run_dir != "/"* ]]; then
		run_dir=${curdir}/${run_dir}
	fi
fi
cd $run_dir

setup_done=0
out_file=""
show_usage=0
cpu_add=0
powers_2=0

usage()
{
	echo "Usage $1:"
	echo "  --commit <n>: git commit to use, default is the tag ${coremark_version}"
	echo "  --cpu_add <n>: starting at cpu count of 1, add this number of cpus to each run"
	echo "  --powers_2s: starting at 1, run the number of cpus by powers of 2's"
	source $curdir/test_tools/general_setup --usage
	exit 0
}

install_test_tools()
{
	#
	# Clone the repo that contains the common code and tools
	#
	tools_git=https://github.com/redhat-performance/test_tools-wrappers
	found=0
	for arg in "$@"; do
		if [ $found -eq 1 ]; then
			tools_git=$arg
			found=0
		fi
		if [[ $arg == "--tools_git" ]]; then
			found=1
		fi

		#
		# We do the usage check here, as we do not want to be calling
		# the common parsers then checking for usage here.  Doing so will
		# result in the script exiting with out giving the test options.
		#
		if [[ $arg == "--usage" ]]; then
			show_usage=1
		fi
	done

	#
	# Check to see if the test tools directory exists.  If it does, we do not need to
	# clone the repo.
	#
	if [ ! -d "$curdir/test_tools" ]; then
		git clone $tools_git $curdir/test_tools
		if [ $? -ne 0 ]; then
			exit_out "pulling git $tools_git failed." 1
		fi
	fi
	if [ $show_usage -eq 1 ]; then
		usage $1
	fi
}

execute_coremark()
{
	touch *.c
	touch */*.c
	#
	# Ubuntu breaking without this setting.
	#
	if [[ "`$curdir/test_tools/detect_os`" == "ubuntu" ]]; then
		declare -x PORT_DIR="linux64"
	fi
	make_flags="-DMULTITHREAD=${2} -DUSE_PTHREAD -pthread"

	#If we're using PCP, snap a chalk line at the start of the iteration
	if [[ $to_use_pcp -eq 1 ]]; then
        	start_pcp_subset
	fi

	make -s XCFLAGS="${make_flags}"
	if [ $? -ne 0 ]; then
		exit_out "Failed: make XCFLAGS=\"${make_flags}\"" 1
	fi

	# If we're using PCP, snap the chalk line at the end of the iteration
	# and log the iteration's result

	if [[ $to_use_pcp -eq 1 ]]; then
        	echo "Send result to PCP archive"
        	test_iters=`grep "Iterations/" run1.log | cut -d':' -f2 | sed "s/ //g"`
        	echo ${test_iters}
        	result2pcp iterations_sec ${test_iters}
	        stop_pcp_subset
	fi

	#
	# Move results
	#
	mv run1.log run1_iter=${1}_threads=${2}.log
	mv run2.log run2_iter=${1}_threads=${2}.log
}

run_coremark()
{
	# If we're using PCP start logging
	if [[ $to_use_pcp -eq 1 ]]; then
                echo "Start PCP"
                start_pcp ${pcpdir}/ ${test_name} $pcp_cfg
        fi

	#
	# Iteration of test.
	#
	for iter in $(seq 1 1 $to_times_to_run); do
		if [ $powers_2 -eq 1 ]; then
			cpu_count=1
			while  [ $cpu_count -lt $numb_cpus ]; do
				execute_coremark $iter $cpu_count
				let "cpu_count=$cpu_count*2"
			done
			execute_coremark $iter $numb_cpus
			continue;
		fi
		if [ $cpu_add -ne  0 ]; then
			cpu_count=1
			while  [ $cpu_count -lt $numb_cpus ]; do
				execute_coremark $iter $cpu_count
				let "cpu_count=${cpu_count}+${cpu_add}"
			done
			execute_coremark $iter $numb_cpus
			continue;
		fi
		#
		# Just the single case.
		#
		execute_coremark $iter $numb_cpus
	done

	# If we're using PCP, stop logging
        if [[ $to_use_pcp -eq 1 ]]; then
                echo "Stop PCP"
                stop_pcp
        fi

	#
	# Create the csv file.
	#
	csv_file=`mktemp /tmp/coremark_csv.XXXXX`
	for i in  `ls run*log`; do
		iteration=`echo $i | cut -d'=' -f2 | cut -d'_' -f1`
		threads=`echo $i | cut -d'=' -f3 | cut -d'.' -f1`
		test_iters=`grep "Iterations/" $i | cut -d':' -f2 | sed "s/ //g"`
		echo ${iteration}:${threads}:${test_iters} >> $csv_file
	done
	$TOOLS_BIN/test_header_info --front_matter --results_file $results_file --host $to_configuration --sys_type $to_sys_type --tuned $to_tuned_setting --results_version $coremark_version --test_name $test_name

	echo "iteration:threads:IterationsPerSec" >> $results_file
	sort -n $csv_file >> $results_file
	rm $csv_file
}

produce_report()
{
	total_ticks=0
	total_time=0
	iterations=0
	coremark=0
	instances=0

	for file in `ls ${1}*`; do
		let "instances=${instances}+1"
		while IFS= read -r line
		do
			if [[ $line == "Total ticks"* ]]; then
				value=`echo $line | cut -d':' -f2 | sed "s/ //g"`
				total_ticks=`echo ${total_ticks}+${value} | bc`
				continue
			fi
			if [[ $line == "Total time"* ]]; then
				value=`echo $line | cut -d':' -f2 | sed "s/ //g"`
				total_time=`echo ${total_time}+${value} | bc`
				continue
			fi
			if [[ $line == "IterationsPerSec"* ]]; then
				value=`echo $line | cut -d':' -f2 | sed "s/ //g"`
				iterations=`echo ${iterations}+${value} | bc`
				continue
			fi
			if [[ $line == "CoreMark 1.0"* ]]; then
				value=`echo $line | cut -d' ' -f 4`
				coremark=`echo ${coremark}+${value} | bc`
				continue
			fi
		done < "${file}"
	done

	#
	# Now produce the coremark summary file
	#
	in_file=`ls ${1}_iter=1_*log`
	while IFS= read -r line
	do
		if [[ $line == "Total ticks"* ]]; then
			value=`echo ${total_ticks}/${instances} | bc`
			echo "Total ticks      : ${value}" >> ${1}_summary
			continue
		fi
		echo $line >> ${1}_summary
	done < "${in_file}"
}

generate_results()
{
	if [ $powers_2 -eq 0 ] && [ $cpu_add -eq 0 ]; then
		produce_report run1
		produce_report run2
	else
		echo Summary not supported yet when doing cpu counts > run1_summary
		echo Summary not supported yet when doing cpu counts > run2_summary
	fi

	lines=`wc -l $results_file | cut -d' ' -f1`
	if [ $lines -lt 2 ]; then
		echo Failed > test_results_report
	else
		echo Ran > test_results_report
	fi
	${curdir}/test_tools/save_results --curdir $curdir --home_root $to_home_root --other_files "*_summary,run*log,test_results_report,${pcpdir}" --results $results_file --test_name coremark --tuned_setting=$to_tuned_setting --version $coremark_version --user $to_user
	popd > /dev/null
}


install_test_tools "$@"

#
# Variables set by general setup.
#
# TOOLS_BIN: points to the tool directory
# to_home_root: home directory
# to_configuration: configuration information
# to_times_to_run: number of times to run the test
# to_run_label: Label for the run
# to_user: User on the test system running the test
# to_sys_type: for results info, basically aws, azure or local
# to_sysname: name of the system
# to_tuned_setting: tuned setting
#

pushd $curdir 2> /dev/null
source $curdir/test_tools/general_setup "$@"
popd 2> /dev/null
# Gather hardware information
$curdir/test_tools/gather_data ${curdir}

ARGUMENT_LIST=(
	"commit"
	"cpu_add"
)

NO_ARGUMENTS=(
	"powers_2"
	"usage"
)

# read arguments
opts=$(getopt \
	--longoptions "$(printf "%s:," "${ARGUMENT_LIST[@]}")" \
	--longoptions "$(printf "%s," "${NO_ARGUMENTS[@]}")" \
	--name "$(basename "$0")" \
	--options "h" \
	-- "$@"
)

eval set --$opts

while [[ $# -gt 0 ]]; do
	case "$1" in
		--commit)
			commit=$2
			shift 2
		;;
		--cpu_add)
			cpu_add=$2
			shift 2
		;;
		--powers_2)
			powers_2=1
			shift 1
		;;
		--usage)
			usage $0
		;;
		-h)
			usage $0
		;;
		--)
			break
		;;
		*)
			echo option not found $1
			usage $0
		;;
	esac
done

if [ $powers_2 -ne 0 ] && [ $cpu_add -ne 0 ]; then
	exit_out "Error, can not designate both cpu_add and powers_2" 1
fi

if [ -d /${to_home_root}/${to_user} ]; then
	cd /${to_home_root}/${to_user}
fi

if [ -d "coremark" ]; then
	cd coremark
	if [[ -f $results_file ]]; then
		time_stamp=`date "+%Y.%m.%d-%H.%M.%S"`
		arch_dir="archive_${time_stamp}"
		mkdir -p $arch_dir
		mv *log  $arch_dir
		mv $results_file test_results_report  $arch_dir
	fi
	cd ..
else
	if [[ $commit == "none" ]]; then
		GIT_TERMINAL_PROMPT=0 git clone --depth 1 --branch ${coremark_version} https://github.com/eembc/coremark
		if [ $? -ne 0 ]; then
			exit_out "Failed: git clone --depth 1 --branch ${coremark_version} https://github.com/eembc/coremark" 1
		fi
	else
		GIT_TERMINAL_PROMPT=0 git clone https://github.com/eembc/coremark
		if [ $? -ne 0 ]; then
			exit_out "Failed: git clone https://github.com/eembc/coremark" 1
		fi
		pushd coremark > /dev/null
		GIT_TERMINAL_PROMPT=0 git checkout ${commit}
		if [ $? -ne 0 ]; then
			exit_out "Failed: git checkout ${commit}" 1
		fi
		popd > /dev/null
	fi
fi

numb_cpus=`nproc`
pushd coremark > /dev/null

# Get PCP setup if we're using it
if [[ $to_use_pcp -eq 1 ]]; then
        source $TOOLS_BIN/pcp/pcp_commands.inc
        setup_pcp
        pcp_cfg=$TOOLS_BIN/pcp/default.cfg
	    pcpdir=/tmp/pcp_`date "+%Y.%m.%d-%H.%M.%S"`
fi

run_coremark

# Shutdown PCP and clean up after ourselves
if [[ $to_use_pcp -eq 1 ]]; then
        shutdown_pcp
fi

generate_results

exit 0

